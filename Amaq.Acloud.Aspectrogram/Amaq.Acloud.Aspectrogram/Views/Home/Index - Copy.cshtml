@{
    ViewBag.Title = "Home Page";
}

@*<div class="container-fluid">
    <div class="row principalRow">
        <div id="outterSpliter">
            <!--Inicio contenedor principal arbol-->
            <div id="mainTreeContainer" style="height: 100%; min-height: 100%; margin: 0px; padding: 0px; max-width:20%">
                <div>
                    <div>
                        <!--Inicio animacion carga del arbol-->
                        <div id="treeLoadingIndicator" class="text-center">
                            <i class="fa fa-spinner fa-pulse fa-2x"></i>
                        </div>
                        <!--Fin animacion carga del arbol-->

                        <div class="treeViewFilter hidden" style="height:80%;">
                            <!--Inicio vista arbol principal-->
                            <!-- Inicio buscador para arbol -->
                            <div class="inner-addon right-addon">
                                <input type="text" id="searchBox" class="form-control" placeholder="Buscar" />
                                <i class="glyphicon glyphicon-search"></i>
                            </div>
                            <!-- Fin buscador para arbol -->
                            <!-- Elementos de la vista arbol -->
                            <div id="treeView"></div>

                            <!-- Inicio Animacion carga filtros para arbol -->
                            <div id="treeFilterLoadingIndicator" class="text-center" style="padding-top: 15px; display: none;">
                                <i class="fa fa-spinner fa-pulse fa-2x"></i>
                            </div>
                            <!-- Fin Animacion carga filtros para arbol -->

                        </div><!--Fin vista arbol principal-->
                    </div>
                </div>

                <div>
                    <div>
                        <div>
                            <!--Inicio animacion carga de los puntos de medicion-->
                            <div id="listboxLoadingIndicator" class="text-center hidden">
                                <i class="fa fa-spinner fa-pulse fa-2x"></i>
                            </div>
                            <!--Fin animacion carga del arbol-->
                            <div id="measurementPoints"></div>
                        </div>
                    </div>
                </div>

            </div><!--Fin contenedor principal arbol-->

            
        </div>
    </div>
</div>*@





<div style="overflow-y:scroll;">
    <div class="toolbar-container">
        <div class="frame">
            <ul class="nav navbar-nav" id="mainToolbar" style="display:none;width:100%;background-color:#D3D3D3;">
                <li class="dropdown">
                    <a data-toggle="dropdown" class="dropdown-toggle">An&aacute;lisis</a>
                    <ul class="dropdown-menu">
                        <li><span class="analyticsMenu" id="signalMenu">Se&ntilde;al</span></li>
                        <li class="divider"></li>
                        <li><span class="analyticsMenu" id="spectrumMenu">Espectro</span></li>
                        <li class="divider"></li>
                        <li><span class="analyticsMenu" id="orbitalMenu">Orbital</span></li>
                        <li class="divider"></li>
                        <li><span class="analyticsMenu" id="liveTrendMenu">Tendencia Inst&aacute;ntanea</span></li>
                        <li class="divider"></li>
                        <li><span class="analyticsMenu" id="historicalTrendMenu">Tendencia Hist&oacute;rica</span></li>
                    </ul>
                </li>
                <li class="dropdown">
                    <a data-toggle="dropdown" class="dropdown-toggle">Eventos</a>
                    <ul class="dropdown-menu">
                        <li><span class="eventsMenu" id="eventListMenu">Listado de eventos</span></li>
                        <li class="divider"></li>
                        <li><span class="eventsMenu" id="eventScheduleMenu">Programar evento</span></li>
                        <li class="divider"></li>
                        <li><span class="eventsMenu" id="scheduledEventsMenu">Eventos programados</span></li>
                    </ul>
                </li>
                <li class="dropdown">
                    <a data-toggle="dropdown" class="dropdown-toggle">Herramientas</a>
                    <ul class="dropdown-menu">
                        <li><span class="toolsMenu" id="verticalTileMenu">Mosaico horizontal</span></li>
                        <li class="divider"></li>
                        <li><span class="toolsMenu" id="horizontalTileMenu">Mosaico vertical</span></li>
                    </ul>
                </li>
                <li class="dropdown">
                    <a data-toggle="dropdown" class="dropdown-toggle">Administraci&oacute;n</a>
                    <ul class="dropdown-menu">
                        <li class="dropdown">
                            <a data-toggle="dropdown" class="dropdown-toggle">Acciones</a>
                            <ul class="dropdown-menu">
                                <li><span class="adminMenu" id="restartAsdaq">Reiniciar ASDAQ</span></li>
                            </ul>
                        </li>
                        <li class="dropdown">
                            <a data-toggle="dropdown" class="dropdown-toggle">Configuraci&oacute;n</a>
                            <ul class="dropdown-menu">
                                <li><span class="adminMenu" id="relateChannels">Relacionar canales</span></li>
                                <li class="divider"></li>
                                <li><span class="adminMenu" id="configureEvents">Eventos</span></li>
                                <li class="divider"></li>
                                <li><span class="adminMenu" id="initialConfiguration">Inicial</span></li>
                                <li class="divider"></li>
                                <li><span class="adminMenu" id="timeOut">Timeout de estados sin datos</span></li>
                            </ul>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>

    <div id="sliderToolbar" class="hidden">
        <div class="row">
            <div class="col-md-3">
                <h2 class="titleSlider">Fase X</h2>
                <div id="phaseSlider" style="width:90%;float:left;"></div>
                <div class="sliderValue" style="float:right;margin-top:-5px;">0</div>
            </div>
            <div class="col-md-3">
                <h2 class="titleSlider">Fase Y</h2>
                <div id="phaseSlider2" style="width:90%;float:left;"></div>
                <div class="sliderValue" style="float:right;margin-top:-5px;">0</div>
            </div>
            <div class="col-md-5">
                <h2 class="titleSlider">Frecuencia de corte</h2>
                <div id="stopFrecuency" style="width:90%;float:left;"></div>
                <div class="sliderValue" style="float:right;margin-top:-5px;">2048</div>
            </div>
            <div class="col-md-1">
                <h2 class="titleSlider">Habilitar filtro</h2>
                <div style="text-align:center;">
                    <input id="enableFilter" name="enableFilter" type="checkbox" title="Habilitar filtro" />
                </div>
            </div>
        </div>
    </div>

    @*<div id="ccwRotation" style="display: none;position: relative;">
            <img src="~/Content/images/counterclockwise-black.png" width="32" height="32" />
            <p style="position: absolute;padding: 0px;top: 9px;left: 34px;font-size: 13px;font-weight: bold;">CCW</p>
        </div>

        <div id="cwRotation" style="display: none;position: relative;">
            <img src="~/Content/images/clockwise-black.png" width="32" height="32" />
            <p style="position: absolute;padding: 0px;top: 9px;left: 34px;font-size: 13px;font-weight: bold;">CW</p>
        </div>*@

    <div id="aspectrogramMainContent" class="container-fluid fullHeight">
        <div id="awContainer" class="fullHeight fullWidth grid-stack" style="margin: 0;">
        </div>
    </div>

</div>

@section scripts {
    @Scripts.Render("~/Scripts/helpers/widgetHelper.js")
    @*@Scripts.Render("~/Scripts/controls/treeViewControl.js")*@
    @Scripts.Render("~/Scripts/controls/listboxControl.js")

    @Scripts.Render("~/Scripts/helpers/Base64Helper.js")
    @Scripts.Render("~/Scripts/binaryReader.js")

    @Scripts.Render("~/Scripts/helpers/Concurrent.Thread.js")

    <!--Scripts de procesamiento de señales digitales-->
    @Scripts.Render("~/Scripts/helpers/MathComplex.js")
    @Scripts.Render("~/Scripts/helpers/FFT.js")
    @Scripts.Render("~/Scripts/helpers/Oscillator.js")

    <!--Scripts A-SPECTROGRAM-->
    @Scripts.Render("~/Scripts/app/helpers/helpers.js")
    @Scripts.Render("~/Scripts/app/helpers/aspectrogramWidget.js")
    @Scripts.Render("~/Scripts/app/helpers/dataMock.js")
    @Scripts.Render("~/Scripts/app/helpers/events.js")
    @Scripts.Render("~/Scripts/app/realTimeMode.js")
    @Scripts.Render("~/Scripts/app/graphs/newSignalGraph.js")
    @Scripts.Render("~/Scripts/app/graphs/newSpectrumGraph.js")
    @Scripts.Render("~/Scripts/app/graphs/newOrbitGraph.js")
    @Scripts.Render("~/Scripts/app/graphs/newLiveTrendGraph.js")
}

@section applicationScripts {

    @*<script id="treeTemplate" type="text/x-jsrender">
        <div>
            {{if EntityType == 1}}
            <span class="fa fa-map-marker icon-large" style="background-color: transparent; color:{{>StatusColor}}; padding: 2px;"></span>
            {{else}}
            {{if EntityType == 2}}
            <span class="fa fa-diamond icon-large" style="background-color: transparent; color:{{>StatusColor}}; padding: 2px;"></span>
            {{/if}}
            {{/if}}

            {{>Name}}
        </div>
    </script>*@

    <script type="text/javascript">
        // Instanciamos el helper de widget
        var widgetHelper = new WidgetHelper(),
        //
        signalGraphObj = [],
        spectrumGraphObj = [],
        orbitGraphObj = [],
        // Control syncfusion para el arbol
        treeViewControl = null,
        listboxControl = null,
        // Nodo seleccionado en el arbol
        selectedTreeNode = null,
        // Objeto que contiene todos los nodos correspondientes al usuario
        jsonTree = null,
        // Objeto contenedor del control ejTreeView de syncfusion
        treeObj = null,
        // Referencia al objeto grid-stack
        //gridStack,
        // Punto de medicion seleccionado
        selectedMdVariable = null;

        var rt = new RealTimeMode;
        var index1, index2, index3;
        index1 = index2 = index3 = 0;

        function showValue(event, ui) {
            var value = $(this).slider('option', 'range') === true ? $(this).slider('values') : $(this).slider('value');
            value = $.isArray(value) ? value[0] + ' a ' + value[1] : value;
            if ($(this).slider('option', 'orientation') == 'vertical') {
                $(this).prev().children('.sliderValue').text(value);
            }
            else {
                $(this).next('.sliderValue').text(value);
            }
        }

        function showFilter(event, ui) {
            var stopFrecuency = 2048 - ui.value;
            $(this).next('.sliderValue').text(stopFrecuency);
            signalGraphObj[0].SetFilter(true, stopFrecuency);
            //signalGraphObj[1].SetFilter(true, stopFrecuency);
            //spectrumGraphObj[0].SetFilter(enableFilter, parseInt(stopFrecuency));
            //spectrumGraphObj[1].SetFilter(enableFilter, parseInt(stopFrecuency));
            //orbitGraphObj[0].SetFilter(enableFilter, parseInt(stopFrecuency));
        }

        $("#phaseSlider").slider({
            animate: false,
            max: 360,
            min: 0,
            orientation: "horizontal",
            step: 1,
            value: 0,
            disabled: false,
            slide: function (event, data) {
                $(this).next('.sliderValue').text(data.value);
                rt.SetPhaseX(data.value);
            },
            change: function (event, data) {
                $(this).next('.sliderValue').text(data.value);
                rt.SetPhaseX(data.value);
            },
        });

        $("#stopFrecuency").slider({
            animate: false,
            max: 2048,
            min: 0,
            orientation: "horizontal",
            step: 1,
            value: 0,
            disabled: true,
            slide: showFilter,
            change: showFilter,
        });

        $("#phaseSlider2").slider({
            animate: false,
            max: 360,
            min: 0,
            orientation: "horizontal",
            step: 1,
            value: 0,
            disabled: false,
            slide: function (event, data) {
                $(this).next('.sliderValue').text(data.value);
                rt.SetPhaseY(data.value);
            },
            change: function (event, data) {
                $(this).next('.sliderValue').text(data.value);
                rt.SetPhaseY(data.value);
            },
        });

        $(document).ready(function () {
            rt.Start();

            var dataManager, query, uiEvent;

            $(".grid-stack").gridstack({
                cellHeight: 80,
                verticalMargin: 10,
                disableDrag: true
            });

            //// Consultamos la lista ompleta de nodos concernientes al usuario
            //dataManager = ej.DataManager({ url: "/Home/GetNodes", adaptor: new ej.UrlAdaptor(), offline: true });
            //query = new ej.Query().select(['Id', 'ParentId', 'Name', 'HasChild', 'Expanded', 'EntityType']);
            //dataManager.executeQuery(query).done(function (e) {
            //    // Almacenamos la lista completa de nodos concernientes al usuario
            //    jsonTree = JSON.parse(JSON.stringify(e.result));

            //    // Consultamos el nodo principal del arbol, caso de tener mas de uno selecciona el primero
            //    selectedTreeNode = ej.DataManager(jsonTree).executeLocal(ej.Query().where('ParentId', 'equal', "", false))[0];

            //    // Inicializamos el control del TreeView con el nodo principal del arbol.
            //    treeViewControl = new TreeViewControl(selectedTreeNode.Id);
            //    // Inicializamos el control del Listbox con el nodo principal del arbol.
            //    listboxControl = new ListboxControl(selectedTreeNode.Id)
            //});

            //// Creamos el evento UIEvents.
            //uiEvent = window.document.createEvent('UIEvents');

            //// SPLITTER HORIZONTAL
            //$("#outterSpliter").ejSplitter({
            //    height: "100%", width: "100%",
            //    properties: [{}, { paneSize: "80%" }],
            //    orientation: ej.Orientation.Horizontal,
            //    enableAutoResize: true,
            //    resize: function (args) {
            //        // Lanzar el evento de resize.
            //        uiEvent.initUIEvent('resize', true, false, window, 0);
            //        window.dispatchEvent(uiEvent);
            //    },
            //    beforeExpandCollapse: function (args) {
            //        // Bloquear la expansion del spliter.
            //        if (args.expanded.index == 0 && args.expanded.size > 0) {
            //            args.cancel = true;
            //        }
            //    },
            //    expandCollapse: function (args) {
            //        // Lanzar el evento de resize.
            //        uiEvent.initUIEvent('resize', true, false, window, 0);
            //        window.dispatchEvent(uiEvent);
            //    }
            //});
            //// SPLITTER HORIZONTAL

            //// SPLITTER VERTICAL
            //$("#mainTreeContainer").ejSplitter({
            //    orientation: ej.Orientation.Vertical,
            //    properties: [{ paneSize: "85%" }, {}],
            //});
            //// SPLITTER VERTICAL

            // 
            $(".grid-stack").on("resizestop", function (event, ui) {
                event.stopPropagation();
                // Lanzar el evento de resize.
                uiEvent.initUIEvent('resize', true, false, window, 0);
                window.dispatchEvent(uiEvent);
            });
            //

            // Mostrar toolbar
            $("#mainToolbar").show();

            $("#sliderToolbar").removeClass("hidden");
            $("#enableFilter").click(function () {
                var enableFilter = this.checked;
                if (enableFilter) {
                    $("#stopFrecuency").slider({ disabled: false });
                } else {
                    $("#stopFrecuency").slider({ disabled: true });
                }

                if ($(".aw-widget").length > 0) {
                    var stopFrecuency = $("#stopFrecuency").next('.sliderValue').text();
                    signalGraphObj[0].SetFilter(enableFilter, parseInt(stopFrecuency));
                    //signalGraphObj[1].SetFilter(enableFilter, parseInt(stopFrecuency));
                    //spectrumGraphObj[0].SetFilter(enableFilter, parseInt(stopFrecuency));
                    //spectrumGraphObj[1].SetFilter(enableFilter, parseInt(stopFrecuency));
                    //orbitGraphObj[0].SetFilter(enableFilter, parseInt(stopFrecuency));
                }
            });

            // Adaptar widgets al area de contenido
            //$(".aspectrogram-widget").trigger("resize");

            // Busqueda dentro del arbol
            $("#searchBox").on("keydown", function (event) {
                var keycode = (event.keyCode ? event.keyCode : event.which);
                if (keycode == '13') {
                    treeViewControl.SearchNodes();
                }
                event.stopPropagation();
            });

            $(".analyticsMenu").click(function () {
                var menuId = this.id;
                switch (menuId) {
                    case "signalMenu":
                        signalGraphObj[index1] = new SignalGraph(0, "signalGraph" + index1, 50, 35, true);
                        signalGraphObj[index1].Show("Forma de onda");
                        index1++;
                        break;
                    case "spectrumMenu":
                        spectrumGraphObj[index2] = new SpectrumGraph(0, "spectrumGraph" + index2, 50, 35, true);
                        spectrumGraphObj[index2].Show("Espectro de amplitud");
                        index2++;
                        break;
                    case "orbitalMenu":
                        orbitGraphObj[index3] = new OrbitGraph(0, "orbitGraph" + index3, 30, 45, true);
                        orbitGraphObj[index3].Show("Orbital");
                        index3++;
                        break;
                    case "liveTrendMenu":
                        graph = new LiveTrendGraph("liveTrendGraph", 50, 40, true);
                        graph.Show();
                        break;
                    case "historicalTrendMenu":
                        alert("No disponible...");
                        //widgetHelper.ToolbarOptions(args.currentTarget.id);
                        break;
                    default:
                        alert("No disponible...");
                        break;
                }
            });

            $(".eventsMenu").click(function () {
                var menuId = this.id;
                switch (menuId) {
                    default:
                        alert("No disponible...");
                        break;
                }
            });

            $(".toolsMenu").click(function () {
                var menuId = this.id;
                switch (menuId) {
                    default:
                        alert("No disponible...");
                        break;
                }
            });

            $(".adminMenu").click(function () {
                var menuId = this.id;
                switch (menuId) {
                    default:
                        alert("No disponible...");
                        break;
                }
            });
        });
    </script>
}
