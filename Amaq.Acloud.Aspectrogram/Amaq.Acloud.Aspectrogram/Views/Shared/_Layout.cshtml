<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - A-SPECTROGRAM</title>
    <!--[if IE]>
    <script type="text/javascript" src="~/Scripts/dygraph/excanvas.js"></script>
    <![endif]-->

    @Styles.Render("~/Content/jquery")
    @Styles.Render("~/Content/bootstrap")
    @Styles.Render("~/Content/gridstack")
    @Styles.Render("~/Content/css")
    @Styles.Render("~/Content/amaq3d")

    @Scripts.Render("~/bundles/dygraph")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/gridstack")
    @Scripts.Render("~/bundles/areaSelect")
    @Scripts.Render("~/bundles/toastr")

    @*<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.17.0/jquery.validate.min.js"></script>*@

    <!--Scripts para Syncfusion, debido a las referencias a otros archivos no se pueden incluir como bundle-->
    <link rel="stylesheet" href="~/Content/ej/web/default-theme/ej.theme.css" />
    <link rel="stylesheet" href="~/Content/ej/web/default-theme/ej.web.all.css" />
    <script type="text/javascript" src="~/Scripts/jsrender.min.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.easing.1.3.min.js"></script>
    <script type="text/javascript" src="~/Scripts/ej/ej.web.all.min.js"></script>
    <script type="text/javascript" src="~/Scripts/ej/cultures/ej.culture.es-ES.js"></script>
    <script type="text/javascript" src="~/Scripts/properties.js"></script>
    <script type="text/javascript" src="~/Scripts/referencesNI.js"></script>
    @*<script type="text/javascript" src="~/Scripts/jquery.validate.min.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>*@
</head>
<body>

    @Html.Partial("_MainHeaderPartial")
    <div class="container-fluid body-content">
        @*<div class="container-fluid">*@
            <div class="row principalRow">
                <div id="outterSpliter">
                    @Html.Partial("../Templates/_MainTreeContainer")
                    @RenderBody()
                </div>
            </div>
        @*</div>*@
    </div>

    @Scripts.Render("~/Scripts/app/helpers/helpers.js")
    @Scripts.Render("~/Scripts/helpers/chartScaleY.js");
    @Scripts.Render("~/Scripts/controls/treeViewControl.js")
    @Scripts.Render("~/Scripts/controls/listboxControl.js")
    @Scripts.Render("~/Scripts/app/admin/locationAdmin.js")
    @Scripts.Render("~/Scripts/app/admin/assetAdmin.js")
    @Scripts.Render("~/Scripts/app/admin/rtdCoefficient.js")
    @Scripts.Render("~/Scripts/app/admin/subVariables.js")
    @Scripts.Render("~/Scripts/app/admin/measurementPointAdmin.js")

    <script id="treeTemplate" type="text/x-jsrender">
        <div>
            {{if EntityType == 1}}
            <span class="fa fa-map-marker icon-large" style="background-color: transparent; color:{{>StatusColor}}; padding: 2px;"></span>
            {{else}}
            {{if EntityType == 2}}
            <span class="fa fa-diamond icon-large" style="background-color: transparent; color:{{>StatusColor}}; padding: 2px;"></span>
            {{/if}}
            {{/if}}

            {{>Name}}
        </div>
    </script>

    <script type="text/javascript">
        //Lenguaje en español de Grid's
        ej.Grid.Locale["es-ES"] = {
            EmptyRecord: "No hay registros que mostrar",
            GroupDropArea: "Arrastre un encabezado de columna aquí",
            DeleteOperationAlert: "No hay registro seleccionado para eliminar",
            EditOperationAlert: "No hay registro seleccionado para editar",
            SaveButton: "Guardar",
            CancelButton: "Cancelar",
            EditFormTitle: "Editar detalles de",
            GroupCaptionFormat: "{{:field}}: {{:key}} - {{:count}} {{if count == 1}}artículo {{else}}artículos{{/if}}",
            UnGroup: "Haga clic aquí para desagrupar",
            Save: "Guardar",
            Update: "Actualizar",
            Delete: "Eliminar",
            Edit: "Editar",
            Cancel: "Cancelar",
            Add: "Agregar",
            Search: "Buscar",
            OkButton: "Si",
            BatchSaveConfirm: "¿Desea guargar los cambios?",
            ConfirmDelete: "¿Desea eliminar el registro?",
            CancelEdit: "¿Desea cancelar los cambios?",
        };

        //Lenguaje en español de Paginación
        ej.Pager.Locale["es-ES"] = {
            pagerInfo: "{0} de {1} páginas ({2} artículos)",
            firstPageTooltip: "Ir a la primera página",
            lastPageTooltip: "Ir a la última página",
            nextPageTooltip: "Ir a la página siguiente",
            previousPageTooltip: "Ir a la página anterior",
            nextPagerTooltip: "Ir al siguiente Pager",
            previousPagerTooltip: "Ir a Pager anterior"
        };

        //Popup de notificaciones
        var popUp = function (type, message) {
            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": false,
                "positionClass": "eighty-percent-width",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "11000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }
            toastr[type](message);
        };

        var
            // Control syncfusion para el arbol
            treeViewControl,
            // Control syncfusion para los puntos de medicion
            listboxControl,
            // Nodo seleccionado en el arbol
            selectedTreeNode,
            // Objeto que contiene todos los nodos correspondientes al usuario
            jsonTree,
            // Tabla de estados
            arrayObjectStatus = [],
            // Listado de las MdVariables correspondientes al activo seleccionado.
            mdVariableList,
            // Objeto contenedor del control ejTreeView de syncfusion
            treeObj,
            // Referencia para la exportacion de imagenes como PNG
            imgExport,
            /*
            Cache principalmente para Home/Index  que almacena en RAM los measurement points y assets que ya se consultaron desde el servidor.
            Esta información se borra cada vez que se refresca el navegador(PostBack)
            */
            mainCache = { loadedMeasurementPoints: [], loadedAssets: [] },
            chartScaleY,
            // Diferentes tipos de medida de todas las subVariables de los measurement point del asset seleccionado
            distinctMeasures = [],
            // Tipos de sensor cargados en memoria para resolver SensorTypeId de los measurement point
            sensorTypes = [],
            // Listado de las SubVariables de cada una de las MdVariables correspondientes al activo seleccionado.
            subVariableList,
            // Punto de medición seleccionado en el árbol
            selectedMeasurementPoint,
            // Activo seleccionado en el árbol
            selectedAsset,
            // Punto de medicion seleccionado en el árbol
            selectedMdVariable,
            // Listado de los diferentes tipos de eventos
            eventTypeList,
            // Listado de estados para eventos
            eventStatusList,
            // Listado de subvariables que pertencen a un evento almacenado
            eventSubVariables,
            // Lista de nodos copiados 
            copiedNodes = [],
            // Tipo de nodo
            typeNode,
            windowing,
            // Estado sin datos
            noDataStatus,
            // Estado máquina apagada
            machineStoppedStatus,
            // Lista de Pares XY encontrados a partir de un activo copiado.
            _pairsXY,
            // Objeto del punto de medición arrastrado cuando se relaciona con un canal Asdaq
            _pointByToAssociate,
            // Orientaciones que puede tener un sensor instalado
            _orientation,
            // Alto y ancho de la ventana de window
            _heightWindow, _widthWindow, 
            // Tipos de material en una RTD
            _materials,
            // Indica si se debe actualizar el ordenamiento de los puntos de medición
            toOrder,
            // Datos originales de base de datos de una MdVariable al cancelar o cerrar el formulario de edición de puntos de medición
            _originalDataPoint,
            // Retorna un punto de medición por su Id
            _getMdVariableById,
            // Tipo de nodo seleccionado
            _selectedEntityType,

            _loadedListbox,
            // Indica si los campos en la vista resumen de puntos de medición y activos estan validados
            _validatedFieldsSV;

        _pointByToAssociate = null;
        _heightWindow = $(window).height();
        _widthWindow = $(window).width();
        toOrder = false;
        _originalDataPoint = {};
        _selectedEntityType = 0;
        _loadedListbox = 0;
        _validatedFieldsSV = true;

        windowing = {
            None: { Text: "Ninguno", Value: 0 },
            Hanning: { Text: "Hanning", Value: 1 },
            Hamming: { Text: "Hamming", Value: 2 }
        };

        chartScaleY = new ChartScaleY();

        _materials = new RTDCoefficient().Materials;

        _orientation = [
                { Name: "X", Code: 1 }, { Name: "Y", Code: 2 },
                { Name: "Axial", Code: 3 }, { Name: "Radial", Code: 4 }, ];

        $.ajax({
            url: "/Home/GetSetOfRiskStates",
            method: "GET",
            data: {},
            success: function (response) {
                var result;

                arrayObjectStatus = response;

                result = new ej.DataManager(arrayObjectStatus).executeLocal(new ej.Query().where("Severity", "equal", 0, false));

                noDataStatus =
                    (result) ? result[0] : null;

                result = new ej.DataManager(arrayObjectStatus).executeLocal(new ej.Query().where("Severity", "equal", -1, false));

                machineStoppedStatus =
                    (result) ? result[0] : null;
            },
            error: function (jqXHR, textStatus) {
                console.error("Error: " + new AjaxErrorHandling().GetXHRStatusString(jqXHR, textStatus));
            }
        });

        $.ajax({
            url: "/Home/GetNodes",
            method: "GET",
            success: function (result) {
                // Almacenamos la lista completa de nodos concernientes al usuario
                jsonTree = JSON.parse(JSON.stringify(result));

                // new code
                if (jsonTree.length == 0) {
                    new LocationAdmin().Create({ Id: null });
                } else {
                    // Consultamos el nodo principal del arbol, caso de tener mas de uno selecciona el primero
                    //selectedTreeNode = ej.DataManager(jsonTree).executeLocal(ej.Query().where("ParentId", "equal", "", false))[0];
                    selectedTreeNode = ej.DataManager(jsonTree).executeLocal(ej.Query().where(ej.Predicate("ParentId", "equal", "", true).or("ParentId", "equal", null, true)))[0];
                    // Inicializamos el control del TreeView con el nodo principal del arbol.
                    treeViewControl = new TreeViewControl(selectedTreeNode.Id);
                }
                // Inicializamos el control del Listbox con el nodo principal del arbol.
                listboxControl = new ListboxControl(null);
            },
            error: function (jqXHR, textStatus) {
                $("#treeLoadingIndicator").hide();
                popUp("error", "Error: " + new AjaxErrorHandling().GetXHRStatusString(jqXHR, textStatus));
            }
        });

        // Obtener los tipos de sensor registrados en el sistema Aspectrogram
        $.ajax({
            url: "/Home/GetAllSensorTypes",
            method: "GET",
            success: function (response) {
                sensorTypes = response; // Mantener los tipos de sensor en memoria RAM
                //sensorTypes.push({ Code: 0, Name: "Seleccione" });
                for (var s = 0; s < sensorTypes.length; s++) {
                    switch (sensorTypes[s].Code) {
                        case 1: // Proximidad
                            sensorTypes[s].Units = [{ Name: "um", Code: "um" }, { Name: "mils", Code: "mils" }, { Name: "Otro", Code: "0" }];
                            break;
                        case 2: // Acelerómetro
                            sensorTypes[s].Units = [{ Name: "g", Code: "g" }, { Name: "mg", Code: "mg" }, { Name: "m/s^2", Code: "m/s^2" }, { Name: "Otro", Code: "0" }];
                            break;
                        case 3: // Velocímetro
                            sensorTypes[s].Units = [{ Name: "mm/s", Code: "mm/s" }, { Name: "In/s", Code: "In/s" }, { Name: "Otro", Code: "0" }];
                            break;
                        case 4: // Referencia angular
                            sensorTypes[s].Units = [];
                            break;
                        case 5: // RTD
                            sensorTypes[s].Units = [{ Name: "°C", Code: "°C" }, { Name: "°F", Code: "°F" }, { Name: "Otro", Code: "0" }];
                            break;
                        case 6: // Voltaje
                            sensorTypes[s].Units = [{ Name: "V", Code: "V" }, { Name: "mV", Code: "mV" }, { Name: "Otro", Code: "0" }];
                            break;
                        case 7: // Corriente
                            sensorTypes[s].Units = [{ Name: "A", Code: "A" }, { Name: "mA", Code: "mA" }, { Name: "Otro", Code: "0" }];
                            break;
                        case 8: // Personalizado
                            sensorTypes[s].Units = [{ Name: "Otro", Code: "0" }];
                            break;
                        case 9: // Desplazamiento axial
                            sensorTypes[s].Units = [{ Name: "um", Code: "um" }, { Name: "mils", Code: "mils" }, { Name: "Otro", Code: "0" }];
                            break;
                        case 10: // Flujo magnético
                            sensorTypes[s].Units = [{ Name: "T", Code: "T" }, { Name: "Otro", Code: "0" }];
                            break;
                    }
                }
            },
            error: function (jqXHR, textStatus) {
                console.error("Error: " + new AjaxErrorHandling().GetXHRStatusString(jqXHR, textStatus));
            }
        });

        eventTypeList = ["Programado", "Arranque/Parada", "Estado de condición"];
        eventStatusList = [
            { name: "Recording", title: "Grabando", cssClass: "recordingEvent" },
            { name: "Uploading", title: "Subiendo", cssClass: "uploadingEvent" },
            { name: "Unread", title: "No leido", cssClass: "unreadEvent" },
            { name: "Read", title: "Leido", cssClass: "readEvent" }
        ];
        eventSubVariables = [];

        $(document).ready(function () {
            // SPLITTER HORIZONTAL
            $("#outterSpliter").ejSplitter({
                height: "100%", width: "100%",
                properties: [{}, { paneSize: "80%" }],
                orientation: ej.Orientation.Horizontal,
                enableAutoResize: true,
                resize: function (args) {
                    var ev = new CustomEvent("resize");
                    ev.initEvent("resize");
                    window.dispatchEvent(ev);

                    // Adecuamos el ancho del slider del filtro dinámico cuando el spliter vertical lo movemos manualmente
                    var width = $("#aspectrogramMainContent").width() - 6;
                    $("#sliderToolbar").css('width', width);
                },
                beforeExpandCollapse: function (args) {
                    // Bloquear la expansion del spliter.
                    if (args.expanded.index == 0 && args.expanded.size > 0) {
                        args.cancel = true;
                    }
                },
                expandCollapse: function (args) {
                    var ev = new CustomEvent("resize");
                    ev.initEvent("resize");
                    window.dispatchEvent(ev);

                    // Adecuamos el ancho del slider del filtro dinámico al expandir o colapsar el spliter vertical
                    var width = $("#aspectrogramMainContent").width() - 6;
                    $("#sliderToolbar").css('width', width);

                }
            });
            // SPLITTER HORIZONTAL

            // SPLITTER VERTICAL
            $("#mainTreeContainer").ejSplitter({
                orientation: ej.Orientation.Vertical,
                properties: [{ paneSize: "55%" }, { paneSize: "34%" }, { paneSize: "11%" }],
            });
            // SPLITTER VERTICAL

            // Colapsar el control splitter del reproductor y expandir el splitter del arbol principal.
            $("#mainTreeContainer").data("ejSplitter").collapse(2);
        });

        _getMdVariableById = function (id, url) {
            return JSON.parse($.ajax({
                type: "GET",
                url: url + "GetMdVariableById",
                data: { id: id },
                dataType: 'json',
                async: false,
                success: function (data) {
                    return data;
                },
                error: function (data) {
                    popUp("error", "Error al obtener un punto de medición!");
                    return null;
                }
            }).responseText);
        };
    </script>

    @RenderSection("scripts", required: false)

    <!--Scripts de la aplicacion-->
    @RenderSection("applicationScripts", required: false)
</body>
</html>
